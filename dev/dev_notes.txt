now request_handler module returns page's source code in a list
you don't need to call the make_request.get_page_source() like this:
    make_request.get_page_source().read() or make_request.get_page_source().readlines()
if you'd like the return to act like make_request.get_page_source().read just use slicing with just only a single index "0" make_request.get_page_source()[0]
otherwise use make_request.get_page_source() 

new datastructure have been implemented 
now you can override get_page_source easily  get_page_source(cmd='whatever')
enumeration has it's dependent class

the enumeration need to be excluded from request_handler module though it works great +1 


1- Work on enumeration/"loot" functions
    -> http://g0tmi1k.blogspot.co.uk/2011/08/basic-linux-privilege-escalation.html
    -> http://pentestmonkey.net/tools/audit/unix-privesc-check
2- Update
    -> Via GIT itself (git pull)
    -> wget https://github.com/lnxg33k/webhandler/zipball/master -O /tmp/webhandler.zip && unzip /tmp/webhandler.zip -d /tmp/webhandler && mv -f /tmp/webhandler/lnxg33k-webhandler-*/* ./ && rm -rf /tmp/webhandler{/,zip}
3- "system" command:
    -> echo -n "Hostname: "; hostname
    -> echo -n "Kernel: "; uname -a
    -> echo -n "OS: "; cat /etc/*-release | head -n 1
    -> echo -n "Time: "; date
    -> echo -n "Timezone (UTC): "; zdump UTC
    -> echo -n "Language: "; echo $LANG
4- "ip" command:
    -> echo -n "Internal IP/subnet: "; ip addr show | grep inet | awk '{print $2}'
    -> echo -n "External IP: "; curl http://ifconfig.me/ip
    -> echo -n "DNS: "; cat /etc/resolv.conf | awk {'print $2'}
    -> echo -n "Gateway (eth0): "; route -n | grep eth0 | awk '{print $2}' | head -n 1
    -> echo -n "DHCP? (eth0): "; if [ -f /etc/sysconfig/network-scripts/ifcfg-eth0 ]; then grep "BOOTPROTO=dhcp" /etc/sysconfig/network-scripts/ifcfg-eth0; if [[ $? -eq 1 ]]; then echo "No"; else echo "Yes"; fi; elif [ -f /etc/network/interfaces ] ; then grep "BOOTPROTO=dhcp" /etc/network/interfaces; if [[ $? -eq 1 ]]; then echo "No"; else echo "Yes"; fi; else echo "No"; fi
    -> echo -n "DHCP Server: "; if [ -f /var/lib/dhcp3/dhclient.leases ]; then cat /var/lib/dhcp3/dhclient.leases ; else echo "N/A"; fi
6- "history" command:
    ->     for i in $(cut -d: -f6 /etc/passwd | sort | uniq); do
            [ -f $i/.bash_history ] && echo "bash_history: $i"
            [ -f $i/.nano_history ] && echo "nano_history: $i"
            [ -f $i/.atftp_history ] && echo "atftp_history: $i"
            [ -f $i/.mysql_history ] && echo "mysql_history: $i"
            [ -f $i/.php_history ] && echo "php_history: $i"
        done
7- "keys" command:
    -> echo -n "SSL Certs: "; find / -type f -print0 | xargs -0 -I '{}' bash -c 'openssl x509 -in {} -noout > /dev/null 2>&1; [[ $? == '0' ]] && echo "{}"'
    -> echo -n "SSH Public: "; find / -type f -print0 | xargs -0 -I '{}' bash -c 'ssh-keygen -lf {} >/dev/null 2>&1; [[ $? == '0' ]] && echo "{}"'
    -> echo -n "SSH Private: ";     #find / -type f -exec bash -c 'ssh-keygen -yf {} >/dev/null 2>&1' \; -exec bash -c 'echo {}' \;        #grep -r "SSH PRIVATE KEY FILE FORMAT" /{etc,home,root} 2> /dev/null | wc -l    # find / -name "*host_key*"
8- "stealth" command:
    -> export HISTFILE=/dev/null

Known Issues/Bugs
bug1.png
    -> Command and example output shown in screenshot
bug3.png
    -> Uptime behaves differntly on machines (depends on how long they have been up for & users)
    -->	Machine1: 18:40:39 up  4:40,  load average: 0.14, 0.03, 0.01
    -->	Machine2: 19:40:07 up 19 days, 19:14,  3 users,  load average: 1.07, 1.34, 1.45
